--swiftversion 5.0

# Default Rules (enabled by default)
# ðŸ“ƒ[andOperator] - Prefer comma over && in if, guard or while conditions.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#andOperator
--enable andOperator

# ðŸ“ƒ[anyObjectProtocol] - Prefer AnyObject over class in protocol definitions.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#anyObjectProtocol
--enable anyObjectProtocol

# ðŸ“ƒ[assertionFailures] - Changes all instances of assert(false, ...) to assertionFailure(...) and precondition(false, ...) to preconditionFailure(...).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#assertionFailures
--enable assertionFailures

# ðŸ“ƒ[blankLinesAroundMark] - Insert blank line before and after MARK: comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blankLinesAroundMark
--enable blankLinesAroundMark
# [lineaftermarks] - Insert blank line after "MARK:": "true" (default) or "false"
--lineaftermarks true

# ðŸ“ƒ[blankLinesAtEndOfScope] - Remove trailing blank line at the end of a scope.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blankLinesAtEndOfScope
--enable blankLinesAtEndOfScope

# ðŸ“ƒ[blankLinesAtStartOfScope] - Remove leading blank line at the start of a scope.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blankLinesAtStartOfScope
--disable blankLinesAtStartOfScope

# ðŸ“ƒ[blankLinesBetweenScopes] - Remove blank lines between import statements.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blankLinesBetweenScopes
--enable blankLinesBetweenScopes

# ðŸ“ƒ[braces] - Wrap braces in accordance with selected style (K&R or Allman).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#braces
--enable braces
# [allman] - Use allman indentation style: "true" or "false" (default)
--allman false

# ðŸ“ƒ[consecutiveBlankLines] - Replace consecutive blank lines with a single blank line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#consecutiveBlankLines
--enable consecutiveBlankLines

# ðŸ“ƒ[consecutiveSpaces] - Replace consecutive spaces with a single space.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#consecutiveSpaces
--enable consecutiveSpaces

# ðŸ“ƒ[duplicateImports] - Remove duplicate import statements.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#duplicateImports
--enable duplicateImports

# ðŸ“ƒ[elseOnSameLine] - Place else, catch or while keyword in accordance with current style (same or next line).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#elseOnSameLine
--enable elseOnSameLine
# [elseposition] - Placement of else/catch: "same-line" (default) or "next-line"
--elseposition same-line
# [guardelse] - Guard else: "same-line", "next-line" or "auto" (default)
--guardelse auto

# ðŸ“ƒ[emptyBraces] - Remove whitespace inside empty braces.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#emptyBraces
--enable emptyBraces
# [emptybraces] - Empty braces: "no-space" (default), "spaced" or "linebreak"
--emptybraces no-space

# ðŸ“ƒ[enumNamespaces] - Converts types used for hosting only static members into enums (an empty enum is the canonical way to create a namespace in Swift as it can't be instantiated).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#enumNamespaces
--disable enumNamespaces

# ðŸ“ƒ[extensionAccessControl] - Configure the placement of an extension's access control keyword.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#extensionAccessControl
--enable extensionAccessControl
# [extensionacl] - Place ACL "on-extension" (default) or "on-declarations"
--extensionacl on-extension

# ðŸ“ƒ[fileHeader] - Use specified source file header template for all files.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#fileHeader
--enable fileHeader
# [header] - Header comments: "strip", "ignore", or the text you wish use
--header ignore

# ðŸ“ƒ[hoistPatternLet] - Reposition let or var bindings within pattern.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#hoistPatternLet
--enable hoistPatternLet
# [patternlet] - let/var placement in patterns: "hoist" (default) or "inline"
--patternlet hoist

# ðŸ“ƒ[indent] - Indent code in accordance with the scope level.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#indent
--enable indent
# [indent] - Number of spaces to indent, or "tab" to use tabs
--indent 4
# [tabwidth] - The width of a tab character. Defaults to "unspecified"
--tabwidth unspecified
# [smarttabs] - Align code independently of tab width. defaults to "enabled"
--smarttabs enabled
# [indentcase] - Indent cases inside a switch: "true" or "false" (default)
--indentcase false
# [ifdef] - #if indenting: "indent" (default), "no-indent" or "outdent"
--ifdef no-indent
# [xcodeindentation] - Match Xcode indenting: "enabled" or "disabled" (default)
--xcodeindentation disabled
# [indentstrings] - Indent Multiline Strings: "false" (default) or "true"
--indentstrings false

# ðŸ“ƒ[initCoderUnavailable] - Add @available(*, unavailable) attribute to required init(coder:) when it hasn't been implemented.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#initCoderUnavailable
--enable initCoderUnavailable

# ðŸ“ƒ[leadingDelimiters] - Move leading delimiters to the end of the previous line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#leadingDelimiters
--enable leadingDelimiters

# ðŸ“ƒ[linebreakAtEndOfFile] - Add empty blank line at end of file.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#linebreakAtEndOfFile
--enable linebreakAtEndOfFile

# ðŸ“ƒ[linebreaks] - Use specified linebreak character for all linebreaks (CR, LF or CRLF).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#linebreaks
--enable linebreaks
# [linebreaks] - Linebreak character to use: "cr", "crlf" or "lf" (default)
--linebreaks lf

# ðŸ“ƒ[modifierOrder] - Use consistent ordering for member modifiers.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#modifierOrder
--enable modifierOrder
# [modifierorder] - Comma-delimited list of modifiers in preferred order
--modifierorder

# ðŸ“ƒ[numberFormatting] - Use consistent grouping for numeric literals. Groups will be separated by _ delimiters to improve readability. For each numeric type you can specify a group size (the number of digits in each group) and a threshold (the minimum number of digits in a number before grouping is applied).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#numberFormatting
--enable numberFormatting
# [decimalgrouping] - Decimal grouping,threshold (default: 3,6) or "none", "ignore"
--decimalgrouping 3,6
# [binarygrouping] - Binary grouping,threshold (default: 4,8) or "none", "ignore"
--binarygrouping 4,8
# [octalgrouping] - Octal grouping,threshold (default: 4,8) or "none", "ignore"
--octalgrouping 4,8
# [hexgrouping] - Hex grouping,threshold (default: 4,8) or "none", "ignore"
--hexgrouping 4,8
# [fractiongrouping] - Group digits after '.': "enabled" or "disabled" (default)
--fractiongrouping disabled
# [exponentgrouping] - Group exponent digits: "enabled" or "disabled" (default)
--exponentgrouping disabled
# [hexliteralcase] - Casing for hex literals: "uppercase" (default) or "lowercase"
--hexliteralcase uppercase
# [exponentcase] - Case of 'e' in numbers: "lowercase" or "uppercase" (default)
--exponentcase uppercase

# ðŸ“ƒ[preferKeyPath] - Convert trivial map { $0.foo } closures to keyPath-based syntax.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#preferKeyPath
--enable preferKeyPath

# ðŸ“ƒ[redundantBackticks] - Remove redundant backticks around identifiers.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantBackticks
--enable redundantBackticks

# ðŸ“ƒ[redundantBreak] - Remove redundant break in switch case.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantBreak
--enable redundantBreak

# ðŸ“ƒ[redundantClosure] - Removes redundant closures bodies, containing a single statement, which are called immediately.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantClosure
--enable redundantClosure

# ðŸ“ƒ[redundantExtensionACL] - Remove redundant access control modifiers.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantExtensionACL
--enable redundantExtensionACL

# ðŸ“ƒ[redundantFileprivate] - Prefer private over fileprivate where equivalent.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantFileprivate
--enable redundantFileprivate

# ðŸ“ƒ[redundantGet] - Remove unneeded get clause inside computed properties.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantGet
--enable redundantGet

# ðŸ“ƒ[redundantInit] - Remove explicit init if not required.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantInit
--enable redundantInit

# ðŸ“ƒ[redundantLet] - Remove redundant let/var from ignored variables.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantLet
--enable redundantLet

# ðŸ“ƒ[redundantLetError] - Remove redundant let error from catch clause.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantLetError
--enable redundantLetError

# ðŸ“ƒ[redundantNilInit] - Remove redundant nil default value (Optional vars are nil by default).
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantNilInit
--enable redundantNilInit

# ðŸ“ƒ[redundantObjc] - Remove redundant @objc annotations.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantObjc
--enable redundantObjc

# ðŸ“ƒ[redundantParens] - Remove redundant parentheses.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantParens
--enable redundantParens

# ðŸ“ƒ[redundantPattern] - Remove redundant pattern matching parameter syntax.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantPattern
--enable redundantPattern

# ðŸ“ƒ[redundantRawValues] - Remove redundant raw string values for enum cases.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantRawValues
--enable redundantRawValues

# ðŸ“ƒ[redundantReturn] - Remove unneeded return keyword.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantReturn
--enable redundantReturn

# ðŸ“ƒ[redundantSelf] - Insert/remove explicit self where applicable.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantSelf
--enable redundantSelf
# [self] - Explicit self: "insert", "remove" (default) or "init-only"
--self remove
# [selfrequired] - Comma-delimited list of functions with @autoclosure arguments
--selfrequired

# ðŸ“ƒ[redundantType] - Remove redundant type from variable declarations.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantType
--enable redundantType
# [redundanttype] -  "inferred", "explicit", or "infer-locals-only" (default)
--redundanttype infer-locals-only

# ðŸ“ƒ[redundantVoidReturnType] - Remove explicit Void return type.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantVoidReturnType
--enable redundantVoidReturnType
# [closurevoid] - Closure void returns: "remove" (default) or "preserve"
--closurevoid remove

# ðŸ“ƒ[semicolons] - Remove semicolons.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#semicolons
--enable semicolons
# [semicolons] - Allow semicolons: "never" or "inline" (default)
--semicolons inline

# ðŸ“ƒ[sortDeclarations] - Sorts the body of declarations with // swiftformat:sort and declarations between // swiftformat:sort:begin and // swiftformat:sort:end comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#sortDeclarations
--enable sortDeclarations

# ðŸ“ƒ[sortedImports] - Sort import statements alphabetically.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#sortedImports
--enable sortedImports
# [importgrouping] - "testable-first/last", "alpha" (default) or "length"
--importgrouping alpha

# ðŸ“ƒ[spaceAroundBraces] - Add or remove space around curly braces.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundBraces
--enable spaceAroundBraces

# ðŸ“ƒ[spaceAroundBrackets] - Add or remove space around square brackets.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundBrackets
--enable spaceAroundBrackets

# ðŸ“ƒ[spaceAroundComments] - Add space before and/or after comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundComments
--enable spaceAroundComments

# ðŸ“ƒ[spaceAroundGenerics] - Remove space around angle brackets.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundGenerics
--enable spaceAroundGenerics

# ðŸ“ƒ[spaceAroundOperators] - Add or remove space around operators or delimiters.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundOperators
--enable spaceAroundOperators
# [operatorfunc] - Spacing for operator funcs: "spaced" (default) or "no-space"
--operatorfunc spaced
# [nospaceoperators] - Comma-delimited list of operators without surrounding space
--nospaceoperators
# [ranges] - Spacing for ranges: "spaced" (default) or "no-space"
--ranges spaced

# ðŸ“ƒ[spaceAroundParens] - Add or remove space around parentheses.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceAroundParens
--enable spaceAroundParens

# ðŸ“ƒ[spaceInsideBraces] - Add space inside curly braces.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceInsideBraces
--enable spaceInsideBraces

# ðŸ“ƒ[spaceInsideBrackets] - Remove space inside square brackets.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceInsideBrackets
--enable spaceInsideBrackets

# ðŸ“ƒ[spaceInsideComments] - Add leading and/or trailing space inside comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceInsideComments
--enable spaceInsideComments

# ðŸ“ƒ[spaceInsideGenerics] - Remove space inside angle brackets.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceInsideGenerics
--enable spaceInsideGenerics

# ðŸ“ƒ[spaceInsideParens] - Remove space inside parentheses.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#spaceInsideParens
--enable spaceInsideParens

# ðŸ“ƒ[strongOutlets] - Remove weak modifier from @IBOutlet properties.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#strongOutlets
--enable strongOutlets

# ðŸ“ƒ[strongifiedSelf] - Remove backticks around self in Optional unwrap expressions.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#strongifiedSelf
--enable strongifiedSelf

# ðŸ“ƒ[todos] - Use correct formatting for TODO:, MARK: or FIXME: comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#todos
--enable todos

# ðŸ“ƒ[trailingClosures] - Use trailing closure syntax where applicable.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#trailingClosures
--enable trailingClosures
# [trailingclosures] - Comma-delimited list of functions that use trailing closures
--trailingclosures
# [nevertrailing] - List of functions that should never use trailing closures
--nevertrailing

# ðŸ“ƒ[trailingCommas] - Add or remove trailing comma from the last item in a collection literal.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#trailingCommas
--enable trailingCommas
# [commas] - Commas in collection literals: "always" (default) or "inline"
--commas always

# ðŸ“ƒ[trailingSpace] - Remove trailing space at end of a line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#trailingSpace
--enable trailingSpace
# [trimwhitespace] - Trim trailing space: "always" (default) or "nonblank-lines"
--trimwhitespace always

# ðŸ“ƒ[typeSugar] - Prefer shorthand syntax for Arrays, Dictionaries and Optionals.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#typeSugar
--enable typeSugar
# [shortoptionals] - Use ? for Optionals "always" (default) or "except-properties"
--shortoptionals always

# ðŸ“ƒ[unusedArguments] - Mark unused function arguments with _.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#unusedArguments
--disable unusedArguments
# [stripunusedargs] - "closure-only", "unnamed-only" or "always" (default)
--stripunusedargs always

# ðŸ“ƒ[void] - Use Void for type declarations and () for values.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#void
--enable void
# [voidtype] - How Void types are represented: "void" (default) or "tuple"
--voidtype void

# ðŸ“ƒ[wrap] - Wrap lines that exceed the specified maximum width.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrap
--enable wrap
# [maxwidth] - Maximum length of a line before wrapping. defaults to "none"
--maxwidth none
# [nowrapoperators] - Comma-delimited list of operators that shouldn't be wrapped
--nowrapoperators 
# [assetliterals] - color/image literal width. "actual-width" or "visual-width"
--assetliterals visual-width
# [wrapternary] - Wrap ternary operators: "default", "before-operators"
--wrapternary default

# ðŸ“ƒ[wrapArguments] - Align wrapped function arguments or collection elements.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapArguments
--enable wrapArguments
# [wraparguments] - Wrap all arguments: "before-first", "after-first", "preserve"
--wraparguments before-first
# [wrapparameters] - Wrap func params: "before-first", "after-first", "preserve"
--wrapparameters before-first
# [wrapcollections] - Wrap array/dict: "before-first", "after-first", "preserve"
--wrapcollections before-first
# [closingparen] - Closing paren position: "balanced" (default) or "same-line"
--closingparen balanced
# [wrapreturntype] - Wrap return type: "if-multiline", "preserve" (default)
--wrapreturntype preserve
# [wrapconditions] - Wrap conditions: "before-first", "after-first", "preserve"
--wrapconditions preserve
# [wraptypealiases] - Wrap typealiases: "before-first", "after-first", "preserve"
--wraptypealiases preserve

# ðŸ“ƒ[wrapAttributes] - Wrap @attributes onto a separate line, or keep them on the same line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapAttributes
--enable wrapAttributes
# [funcattributes] - Function @attributes: "preserve", "prev-line", or "same-line"
--funcattributes preserve
# [typeattributes] - Type @attributes: "preserve", "prev-line", or "same-line"
--typeattributes preserve
# [varattributes] - Property @attributes: "preserve", "prev-line", or "same-line"
--varattributes preserve

# ðŸ“ƒ[wrapMultilineStatementBraces] - Wrap the opening brace of multiline statements.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapMultilineStatementBraces
--disable wrapMultilineStatementBraces

# ðŸ“ƒ[yodaConditions] - Prefer constant values to be on the right-hand-side of expressions.
# ðŸ”—  https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#yodaConditions
--enable yodaConditions
# [yodaswap] - Swap yoda values: "always" (default) or "literals-only"
--yodaswap always

# Opt-in Rules (disabled by default)

# ðŸ“ƒ[acronyms] - Capitalizes acronyms when the first character is capitalized
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#acronyms
--disable acronyms
# [acronyms] - Acronyms to auto-capitalize. Defaults to "ID,URL,UUID".
--acronyms ID,URL,UUID

# ðŸ“ƒ[blankLinesBetweenImports] - Remove blank lines between import statements.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blankLinesBetweenImports
--disable blankLinesBetweenImports

# ðŸ“ƒ[blockComments] - Changes block comments to single line comments.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#blockComments
--disable blockComments

# ðŸ“ƒ[isEmpty] - Prefer isEmpty over comparing count against zero.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#isEmpty
--disable isEmpty

# ðŸ“ƒ[markTypes] - Adds a mark comment before top-level types and extensions.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#markTypes
--disable markTypes
# [marktypes] - Mark types "always" (default), "never", "if-not-empty"
# --marktypes if-not-empty
# [typemark] - Template for type mark comments. Defaults to "MARK: - %t"
--typemark "MARK: - %t"
# [markextensions] - Mark extensions "always" (default), "never", "if-not-empty"
# --markextensions if-not-empty
# [extensionmark] - Mark for standalone extensions. Defaults to "MARK: - %t + %c"
--extensionmark "MARK: - %t + %c"
# [groupedextension] - Mark for extension grouped with extended type. ("MARK: %c")
--groupedextension "MARK: %c"

# ðŸ“ƒ[organizeDeclarations] - Organizes declarations within class, struct, enum, actor, and extension bodies.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#organizeDeclarations
--disable organizeDeclarations
# [categorymark] - Template for category mark comments. Defaults to "MARK: %c"
--categorymark "MARK: %c"
# [markcategories] - Insert MARK comments between categories (true by default)
--markcategories true
# [beforemarks] - Declarations placed before first mark (e.g. typealias,struct)
--beforemarks 
# [lifecycle] - Names of additional Lifecycle methods (e.g. viewDidLoad)
--lifecycle 
# [organizetypes] - Declarations to organize (default: class,actor,struct,enum)
# --organizetypes 
# [structthreshold] - Minimum line count to organize struct body. Defaults to 0
--structthreshold 0
# [classthreshold] - Minimum line count to organize class body. Defaults to 0
--classthreshold 0
# [enumthreshold] - Minimum line count to organize enum body. Defaults to 0
--enumthreshold 0
# [extensionlength] - Minimum line count to organize extension body. Defaults to 0
--extensionlength 0

# ðŸ“ƒ[preferDouble] - Replaces occurrences of CGFloat with Double when targeting Swift 5.5 and above.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#preferDouble
--disable preferDouble

# ðŸ“ƒ[sortedSwitchCases] - Sorts switch cases alphabetically.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#sortedSwitchCases
--disable sortedSwitchCases

# ðŸ“ƒ[wrapConditionalBodies] - Wrap the bodies of inline conditional statements onto a new line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapConditionalBodies
--disable wrapConditionalBodies

# ðŸ“ƒ[wrapEnumCases] - Writes one enum case per line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapEnumCases
--disable wrapEnumCases

# ðŸ“ƒ[wrapSwitchCases] - Writes one switch case per line.
# ðŸ”— https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapSwitchCases
--disable wrapSwitchCases
